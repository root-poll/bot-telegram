# -*- coding: utf8 -*-
import telebot
from telebot import types
from telebot.types import  InputFile
import requests
import os
from openpyxl import load_workbook
import datetime
import sqlite3
import re
import random
import gspread
from gspread import Client, Spreadsheet, Worksheet
from datetime import datetime, timedelta, timezone
from loguru import logger
from flask import Flask, request

API_TOKEN = '7000908905:AAFIQskVbiFhiBuTsyTO-mVpdwDeRUfQ0Bc'
WEBHOOK_HOST = 'https://etedsfeqa.ru'
WEBHOOK_PORT = 443  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è HTTPS-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç 443
WEBHOOK_LISTEN = '0.0.0.0'  # –°–ª—É—à–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã

app = Flask(__name__)
bot = telebot.TeleBot(API_TOKEN)





#–ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú !!!!!!!!!!!!!!!!!!!!!!

gc: Client = gspread.service_account("../bottelegram/service-account.json") #json —Ñ–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–∞
DataBaseFile = '../bottelegram/use.db' #–ø—É—Ç—å –∫ –±–¥
#–ø—É—Ç—å –∫ –ø—Ä–∏–º–µ—Ä—É (—Ñ–æ—Ç–æ) 749 —Å—Ç—Ä–æ–∫–∞
user_location = None
wb = ''

def custom_time_formatter(record):
    record_time = datetime.utcnow() + timedelta(hours=3)
    record["time"] = record_time
    return "{time} {level} {message}\n".format(**record)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –∏ —Å–∂–∞—Ç–∏–µ–º –≤ –∞—Ä—Ö–∏–≤
logger.add("../bottelegram/debug/debug.log", format=custom_time_formatter, level="DEBUG", rotation="00:00")

userurl = ''

mem_list = ['–µ–±–ª–∞–Ω? —Å—Å—ã–ª–∫—É –¥–∞–π..','–ª–∞–Ω, –Ω–µ —É—Ä—á–∏', '–±–ª—è –Ω—É —Ç—ã –∏ ...', '–µ–±–ª–∞–Ω—á–∏–∫ –∑–∞–≤–∞–ª–∏ —É–∂–µ –ø–∂ü§ì', '–∑–∞–∫–∏–±–µ—Ä–±—É–ª–∏—Ç—å —Ç–µ–±—è?', '–∫–ª–æ—É–Ω —Ç—ã ', '–Ω–µ—Ç —Ç—ã', '—á–æ–ø —á–æ–ø —á–æ–ø', '—è —Ç–≤–æ—é –º–∞–º—É –∑–Ω–∞—é', '–Ω–µ –µ–±–∏ –º–æ–∏ 1 –∏ 0', '–±–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ –¥–∞–π –º–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É..', '–±–æ–∂–µ —á–µ–ª, –∫–∞–∫ –∑–∞—Ä—è–¥–∫–∏ –ø–æ–∂–∏–≤–∞—é—Ç!!??', '—è –Ω–∞—É—á—É—Å—å –∂–∞–ª–æ–≤–∞—Ç—å—Å—è @kravchenko_0013']
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞—á–∞—Ç—å"
@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f" {message.from_user.username} handler comm = start ")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–°–¥–µ–ª–∞—Ç—å –≤–µ—â–∏')
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)



@bot.message_handler(commands=['spamv'])
#—Å–ø–∞–º –≤–∏–∫–∏
def spam_puffsun(message):
    i = 0
    if message.chat.id == 5045737709 or message.chat.id == 875402165:
        logger.info(f" {message.from_user.username} handler comm = spam ")
        while i <= 10:
            bot.send_message("2097463384", "–ì–¥–µ 200—Ä?")
            logger.info(f" {message.from_user.username} handler comm = spam {i} ")
            i += 1


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def change_location(message):
    logger.info(f" {message.from_user.username} handler comm = change_location")
    #–ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π
    conn = sqlite3.connect(DataBaseFile)
    cursor = conn.cursor()
    people_id = message.chat.id
    cursor.execute(f"SELECT id FROM info WHERE id = {people_id}")
    data = cursor.fetchone()
    if data is None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞ –ª–æ–∫–∞—Ü–∏—è, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, save_location)
    else:
        cursor.execute(f"SELECT locatename FROM info WHERE id = {people_id}")
        user_location = cursor.fetchone()[0]
        markup2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup2.row('–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é','–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, f"–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è - {user_location}", reply_markup=markup2)

@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é')
def change_location(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é:")
    bot.register_next_step_handler(message, save_location)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_location(message):
    user_location = message.text
    conn = sqlite3.connect(DataBaseFile)

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞-–∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    cursor = conn.cursor()
    people_id = message.chat.id
    cursor.execute(f"SELECT id FROM info WHERE id = {people_id}")
    data = cursor.fetchone()
    print(data)

    if data is None:
    # add values in fields
        user_id = [message.chat.id]
        cursor.execute("INSERT INTO info (id) VALUES(?);", user_id)


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_query = "UPDATE info SET locatename = ? WHERE id = ?"
    cursor.execute(update_query, (user_location, people_id))
    conn.commit()
    bot.send_message(message.chat.id, "–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å –≤–µ—â–∏"
@bot.message_handler(func=lambda message: message.text == '–°–¥–µ–ª–∞—Ç—å –≤–µ—â–∏')
def do_things(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤:")
    logger.info(f" {message.from_user.username} handler comm = do_things - —Å–¥–µ–ª–∞—Ç—å –≤–µ—â–∏ –Ω–∞–∂–∞—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def do_things(message):
    bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=create_keyboard())
    logger.info(f" {message.from_user.username} handler comm = do_things - –Ω–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤)
@bot.message_handler(content_types=['text'])
@logger.catch
def handle_document(message):
    # –î–∏–∞–ø–æ–∑–æ–Ω—ã –¥–ª—è –æ—à–∏–±–æ–∫ - –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    range_error_colum = []
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–∫—Ä–∞—Å–∫–∏ ranges_to_color = ["C4:H4", "C5:H5", "C14:H14"]
    ranges_to_color = []
    # –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π i –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ä–∞–∑–¥–µ–ª—è—é—â–∞—è –ª–∏–Ω–∏—è (—á–µ—Ä–Ω—ã–µ —è—á–µ–π–∫–∏)
    list_row_fixed = []
    logger.info(f" {message.from_user.username} do_things - –ø–æ–π–º–∞–ª —Ç–µ–∫—Å—Ç (–∫–∞–∫ —Å—Å—ã–ª–∫—É)")
    userurl = message.text
    regex_patterns = r'((http|https)\:\/\/)?[a-zA-Z0-9\.\/\?\:@\-_=#]+\.([a-zA-Z]){2,6}([a-zA-Z0-9\.\&\/\?\:@\-_=#])*'
    result = re.search(regex_patterns, userurl)
    if userurl[:24] != "https://docs.google.com/":
        mem = message.chat.id
        if mem == 5045737709 or mem == 875402165 or mem == 2097463384:
            logger.info(f" {message.from_user.username} do_things - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –ù–ï –ü–†–û–ô–î–ï–ù–ê (–∫–∞–∫ —Å—Å—ã–ª–∫—É)")
            logger.warning(f" {message.from_user.username} id = {message.chat.id} –Ω–∞–ø–∏—Å–∞–ª –≤ do_things - {userurl} ")
            crack = random.randint(0, 12)
            bot.send_message(message.chat.id, mem_list[crack])
            logger.info(f" {message.from_user.username} –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ - {mem_list[crack]}")
    #if not result:
        else:
            logger.info(f" {message.from_user.username} do_things - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –ù–ï –ü–†–û–ô–î–ï–ù–ê (–∫–∞–∫ —Å—Å—ã–ª–∫—É)")
            logger.warning(f" {message.from_user.username} id = {message.chat.id} –Ω–∞–ø–∏—Å–∞–ª –≤ do_things - {userurl} ")
            bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
    else:

        logger.info(f" {message.from_user.username} do_things - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –ü–†–û–ô–î–ï–ù–ê ")
        logger.info(result.group(0))
        wb = gc.open_by_url(userurl)
        logger.info(f" {message.from_user.username} do_things - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ ")

        current_date = datetime.now().strftime('%d.%m.%Y')  # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞–±–ª–∏—Ü—ã...")
        logger.info(f" {message.from_user.username} do_things - —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É –æ–± –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã ")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Excel
        try:

            bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")




            # –£–∑–Ω–∞—Ç—å –¥–ª–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ã
            worksheet = wb.get_worksheet(0)
            list_cat_string = worksheet.col_values(2)
            test1 = 0
            i = 1
            while i <= len(list_cat_string):
                if len(list_cat_string[i-1]) == 3:
                    test1 += 1
                i += 1
            print(test1)
            logger.info(f" {message.from_user.username} do_things - –¥–ª–∏–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - {len(list_cat_string)}")
            #len(worksheet.col_values(3))+21
            if test1 <= 4:
                list_of_lists = worksheet.get_all_values()
                row_count = len(list_of_lists)
                range_all = "A1:O"+str(row_count)

                row = "A4:B"+str(row_count)
                table_row = []
                table_row.append(row)
                table_row.append("A1:H3")
                #—Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã - –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç - —Ü–≤–µ—Ç - —Ä–∞–∑–º–µ—Ä - —É–±—Ä–∞—Ç—å –∑–∞–∫—Ä–∞—Å–∫—É
                worksheet.format(range_all, {
                    "backgroundColor": {
                        "red": 1.0,
                        "green": 1.0,
                        "blue": 1.0
                    },
                    "horizontalAlignment": "CENTER",
                    "textFormat": {
                        "foregroundColor": {
                            "red": 0.0,
                            "green": 0.0,
                            "blue": 0.0
                        },
                        "fontSize": 12,
                        "bold": False
                    }
                })
                #–ò–∑–º–µ–Ω–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã - —Ç–µ–∫—Å—Ç —á–µ—Ä–Ω—ã–π, –ø–æ —Ü–µ–Ω—Ç—Ä—É, 12 —à—Ä–∏—Ñ—Ç, –∂–∏—Ä–Ω—ã–π (—Å–∞–º –∂–∏—Ä–Ω—ã–π)
                worksheet.format(table_row, {
                    "horizontalAlignment": "CENTER",
                    "textFormat": {
                        "foregroundColor": {
                            "red": 0.0,
                            "green": 0.0,
                            "blue": 0.0
                        },
                        "fontSize": 12,
                        "bold": True
                    }
                })

                logger.info(f" {message.from_user.username} do_things - –î–ª–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ã - {row_count}")

                mas = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],
                       [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],
                       [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]

                name_disp = ['–ñ–∏–º –≥–∏—Ä–∏', '–ú–∞—Ö –≥–∏—Ä–∏', '–û—Ç–∂–∏–º–∞–Ω–∏—è', '–ü—Ä–µ—Å—Å', '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∏—Ä–µ–π', '–ü—Ä—ã–≥–∞—é—â–∏–π –î–∂–µ–∫',
                             '–†—ã–≤–æ–∫ –≥–∏—Ä–∏', '–°–∫–∞–∫–∞–ª–∫–∞', ]
                disp_end = [['–ñ–∏–º –≥–∏—Ä–∏'], ['–ú–∞—Ö –≥–∏—Ä–∏'], ['–û—Ç–∂–∏–º–∞–Ω–∏—è'], ['–ü—Ä–µ—Å—Å'], ['–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è'], ['–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∏—Ä–µ–π'], ['–ü—Ä—ã–≥–∞—é—â–∏–π –î–∂–µ–∫'], ['–†—ã–≤–æ–∫ –≥–∏—Ä–∏'], ['–°–∫–∞–∫–∞–ª–∫–∞']] #–¥–ª—è –¥–µ—Ç–µ–π
                disp_end_man = [['–ñ–∏–º –≥–∏—Ä–∏'], ['–ú–∞—Ö –≥–∏—Ä–∏'], ['–û—Ç–∂–∏–º–∞–Ω–∏—è'], ['–ü—Ä–µ—Å—Å'], ['–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è'], ['–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∏—Ä–µ–π'], ['–ü—Ä—ã–≥–∞—é—â–∏–π –î–∂–µ–∫'], ['–†—ã–≤–æ–∫ –≥–∏—Ä–∏'], ['–°–∫–∞–∫–∞–ª–∫–∞']] #–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö

                i = 4
                record_number = 0
                record_part = row_count - 6
                step_check = 0
                logger.info(f" {message.from_user.username} do_things - –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–±–æ—Ä–∫–∏")
                while i <= row_count:
                    len_value = len(list_of_lists[i-1][1])
                    if len_value >= 3:
                        step_check += 1
                        list_row_fixed.append(i-1)
                    if step_check == 1:  # –ú–ê–õ–¨–ß–ò–ö–ò
                        logger.info(f" {message.from_user.username} do_things - –ø–∞—Ä—Å–∏–Ω–≥ –ú–ê–õ–¨–ß–ò–ö–ò i = {i}")
                        cell_value = list_of_lists[i-1][3]
                        if cell_value == name_disp[0]:  # 1 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i - 1][4] == "":
                                disp_value = 0
                                range_error_colum.append("E"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[0][0] < disp_value:
                                    mas[0][0] = disp_value
                                    mas[0][1] = i
                        if cell_value == name_disp[1]:  # 2 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i - 1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[1][0] < disp_value:
                                    mas[1][0] = disp_value
                                    mas[1][1] = i
                        if cell_value == name_disp[2]:  # 3 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i - 1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[2][0] < disp_value:
                                    mas[2][0] = disp_value
                                    mas[2][1] = i
                        if cell_value == name_disp[3]:  # 4 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i - 1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[3][0] < disp_value:
                                    mas[3][0] = disp_value
                                    mas[3][1] = i
                        if cell_value == name_disp[4]:  # 5 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i - 1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[4][0] < disp_value:
                                    mas[4][0] = disp_value
                                    mas[4][1] = i
                        if cell_value == name_disp[5]:  # 6 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i - 1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[5][0] < disp_value:
                                    mas[5][0] = disp_value
                                    mas[5][1] = i
                        if cell_value == name_disp[6]:  # 7 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[6][0] < disp_value:
                                    mas[6][0] = disp_value
                                    mas[6][1] = i
                        if cell_value == name_disp[7]:  # 8 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[7][0] < disp_value:
                                    mas[7][0] = disp_value
                                    mas[7][1] = i
                        if cell_value == name_disp[8]:  # 9 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i - 1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[8][0] < disp_value:
                                    mas[8][0] = disp_value
                                    mas[8][1] = i
                    elif step_check == 2:  # –î–ï–í–û–ß–ö–ò
                        logger.info(f" {message.from_user.username} do_things - –ø–∞—Ä—Å–∏–Ω–≥ –î–ï–í–û–ß–ö–ò i = {i}")
                        cell_value = list_of_lists[i-1][3]
                        print(cell_value)
                        if cell_value == name_disp[0]:  # 1 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[9][0] < disp_value:
                                    mas[9][0] = disp_value
                                    mas[9][1] = i
                        if cell_value == name_disp[1]:  # 2 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[10][0] < disp_value:
                                    mas[10][0] = disp_value
                                    mas[10][1] = i
                        if cell_value == name_disp[2]:  # 3 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[11][0] < disp_value:
                                    mas[11][0] = disp_value
                                    mas[11][1] = i
                        if cell_value == name_disp[3]:  # 4 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[12][0] < disp_value:
                                    mas[12][0] = disp_value
                                    mas[12][1] = i
                        if cell_value == name_disp[4]:  # 5 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[13][0] < disp_value:
                                    mas[13][0] = disp_value
                                    mas[13][1] = i
                        if cell_value == name_disp[5]:  # 6 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[14][0] < disp_value:
                                    mas[14][0] = disp_value
                                    mas[14][1] = i
                        if cell_value == name_disp[6]:  # 7 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[15][0] < disp_value:
                                    mas[15][0] = disp_value
                                    mas[15][1] = i
                        if cell_value == name_disp[7]:  # 8 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[16][0] < disp_value:
                                    mas[16][0] = disp_value
                                    mas[16][1] = i
                        if cell_value == name_disp[8]:  # 9 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[17][0] < disp_value:
                                    mas[17][0] = disp_value
                                    mas[17][1] = i
                    if step_check == 3:  # –ú—É–∂–∏–∫–∏–∏–∏–∏
                        cell_value = list_of_lists[i-1][3]
                        logger.info(f" {message.from_user.username} do_things - –ø–∞—Ä—Å–∏–Ω–≥ –ú–£–ñ–ò–ö–ò i = {i}")
                        if cell_value == name_disp[0]:  # 1 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[18][0] < disp_value:
                                    mas[18][0] = disp_value
                                    mas[18][1] = i
                        if cell_value == name_disp[1]:  # 2 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[19][0] < disp_value:
                                    mas[19][0] = disp_value
                                    mas[19][1] = i
                        if cell_value == name_disp[2]:  # 3 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[20][0] < disp_value:
                                    mas[20][0] = disp_value
                                    mas[20][1] = i
                        if cell_value == name_disp[3]:  # 4 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[21][0] < disp_value:
                                    mas[21][0] = disp_value
                                    mas[21][1] = i
                        if cell_value == name_disp[4]:  # 5 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[22][0] < disp_value:
                                    mas[22][0] = disp_value
                                    mas[22][1] = i
                        if cell_value == name_disp[5]:  # 6 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[23][0] < disp_value:
                                    mas[23][0] = disp_value
                                    mas[23][1] = i
                        if cell_value == name_disp[6]:  # 7 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[24][0] < disp_value:
                                    mas[24][0] = disp_value
                                    mas[24][1] = i
                        if cell_value == name_disp[7]:  # 8 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[25][0] < disp_value:
                                    mas[25][0] = disp_value
                                    mas[25][1] = i
                        if cell_value == name_disp[8]:  # 9 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[26][0] < disp_value:
                                    mas[26][0] = disp_value
                                    mas[26][1] = i
                    elif step_check == 4:  # –ñ–µ–Ω—â–∏–Ω—ã
                        logger.info(f" {message.from_user.username} do_things - –ø–∞—Ä—Å–∏–Ω–≥ –ñ–ï–ù–©–ò–ù–´ i = {i}")
                        cell_value = list_of_lists[i-1][3]
                        if cell_value == name_disp[0]:  # 1 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[27][0] < disp_value:
                                    mas[27][0] = disp_value
                                    mas[27][1] = i
                        if cell_value == name_disp[1]:  # 2 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[28][0] < disp_value:
                                    mas[28][0] = disp_value
                                    mas[28][1] = i
                        if cell_value == name_disp[2]:  # 3 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[29][0] < disp_value:
                                    mas[29][0] = disp_value
                                    mas[29][1] = i
                        if cell_value == name_disp[3]:  # 4 –î–ò–°
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[30][0] < disp_value:
                                    mas[30][0] = disp_value
                                    mas[30][1] = i
                        if cell_value == name_disp[4]:  # 5 –î–ò–°
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[31][0] < disp_value:
                                    mas[31][0] = disp_value
                                    mas[31][1] = i
                        if cell_value == name_disp[5]:  # 6 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[32][0] < disp_value:
                                    mas[32][0] = disp_value
                                    mas[32][1] = i
                        if cell_value == name_disp[6]:  # 7 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[33][0] < disp_value:
                                    mas[33][0] = disp_value
                                    mas[33][1] = i
                        if cell_value == name_disp[7]:  # 8 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[34][0] < disp_value:
                                    mas[34][0] = disp_value
                                    mas[34][1] = i
                        if cell_value == name_disp[8]:  # 9 –î–ò–°–¶–ï–ü–õ–ò–ù–ê
                            if list_of_lists[i-1][4] == "":
                                disp_value = 0
                                range_error_colum.append("C"+str(i))
                            else:
                                disp_value = int(list_of_lists[i-1][4])
                                if mas[35][0] < disp_value:
                                    mas[35][0] = disp_value
                                    mas[35][1] = i
                    i += 1
                i = 0  ### –í—ã–≤–æ–¥ –∏–∏–∏–º–µ–Ω —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Å–∏–≤–∞ mas
                logger.info(f" {message.from_user.username} do_things - –∑–Ω–∞—á–µ–Ω–∏–µ mas –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ - {mas}")
                x = 0
                mas_name = [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0],[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]
                ob = 1

                while i < len(mas):
                    trupp = int(mas[x][1])
                    if trupp > 0:
                        logger.info(f" {message.from_user.username} do_things - –æ—Ç–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ –∏ —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤, —Å—Ç—Ä–æ–∫–∞ - {trupp}")
                        ranges = "C" + str(trupp)+ ":H"+ str(trupp)
                        record_number += 1
                        ranges_to_color.append(ranges)
                        top_value = list_of_lists[trupp-1][2] + ' ' + list_of_lists[trupp-1][3] + ' - ' + list_of_lists[trupp-1][4]
                        top_name = list_of_lists[trupp-1][2] + ' - ' + list_of_lists[trupp-1][4]
                        print(str(ob) + ' ' + top_value)
                        if len(mas[x]) > 1:
                            if i <= 8 or (i >=18 and i <= 26):
                                mas_name[x] = ("–ú: " + top_name + "\n")
                            else:
                                mas_name[x] = ("–ñ: " + top_name + "\n")


                    i += 1
                    ob += 1
                    x += 1


                #–ø–µ—Ä–µ–±–æ—Ä–∫–∞ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø–æ—Ç–æ–º:
                i = 0

                category_man = "\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç 18 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ</b>\n"
                category_boy = "\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç 8 –¥–æ 17</b>\n"

                s = 0
                sm = 0
                while i < len(mas_name):

                    logger.info(f" {message.from_user.username} do_things - mas_name[{i}] = {mas_name[i]}")
                    print(mas_name[i])
                    if len(mas_name[i]) <= 3:
                        mas_name[i] = ""
                        print(mas_name[i])
                    if i <= 8 and len(mas_name[i]) <= 3 and len(mas_name[i+9]) <= 3:
                        disp_end[i] = ""
                    if i <= 8 and len(mas_name[i+18]) <= 3 and len(mas_name[i+27]) <= 3:
                        disp_end_man[i] = ""
                    if i <=8 and len(mas_name[i]) <= 3 and len(mas_name[i+9]) <= 3:
                        sm += 1
                    if i >= 18 and i <= 26 and len(mas_name[i]) <= 3 and len(mas_name[i+9]) <= 3:
                        s += 1
                    i += 1
                    if s == 9:
                        category_man = ""
                    if sm == 9:
                        category_boy = ""
                i = 0
                number = 1
                while i <= 8:
                    if disp_end[i] != "":
                        disp_end[i] = "\n"+str(number)+". <i>"+name_disp[i]+":</i>\n"
                        number += 1
                    i += 1
                i = 0
                number = 1
                while i <= 8:
                    if disp_end_man[i] != "":
                        disp_end_man[i] = "\n" + str(number) + ". <i>" + name_disp[i] + ":</i>\n"
                        number += 1
                    i += 1
                logger.info(f" {message.from_user.username} do_things - disp_end = {disp_end}")
                logger.info(f" {message.from_user.username} do_things - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ")
                conn = sqlite3.connect(DataBaseFile)
                cursor = conn.cursor()
                people_id = message.chat.id
                cursor.execute(f"SELECT locatename FROM info WHERE id = {people_id}")
                res = cursor.fetchone()[0]
                user_location = str(res)

                logger.info(f" {message.from_user.username} do_things - –≤–∑—è–ª –∏–º—è –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –ë–î - {user_location}")
                conn.commit()
                logger.info(f" {message.from_user.username} do_things - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î ")

                bot.send_message(message.chat.id, "<b>üìç–õ–æ–∫–∞—Ü–∏—è: "+user_location+"</b>\n\nüîù–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω—ã –¥–Ω—è –æ—Ç "+current_date+category_boy+disp_end[0]+mas_name[0] + mas_name[9]+disp_end[1]+mas_name[1] + mas_name[10]+disp_end[2]+mas_name[2] + mas_name[11]+disp_end[3]+mas_name[3] + mas_name[12]+disp_end[4]+mas_name[4] + mas_name[13]+disp_end[5]+mas_name[5] + mas_name[14]+disp_end[6]+mas_name[6] + mas_name[15]+disp_end[7]+mas_name[7] + mas_name[16]+disp_end[8]+mas_name[8] + mas_name[17]+category_man+disp_end_man[0]+mas_name[18] + mas_name[27]+disp_end_man[1]+mas_name[19] + mas_name[28]+disp_end_man[2]+mas_name[20] + mas_name[29]+disp_end_man[3]+mas_name[21] + mas_name[30]+disp_end_man[4]+mas_name[22] + mas_name[31]+disp_end_man[5]+mas_name[23] + mas_name[32]+disp_end_man[6]+mas_name[24] + mas_name[33]+disp_end_man[7]+mas_name[25] + mas_name[34]+disp_end_man[8]+mas_name[26] + mas_name[35]+"\n", parse_mode='HTML')
                # bot.send_message(message.chat.id, '–õ–æ–∫–∞—Ü–∏—è: –°–∫–≤–µ—Ä —É –ì–æ–ª—å—è–Ω–æ–≤—Å–∫–æ–≥–æ –ø—Ä—É–¥–∞ –º.–©—ë–ª–∫–æ–≤—Å–∫–∞—è –†–µ–∫–æ—Ä–¥—Å–º–µ–Ω—ã –¥–Ω—è –æ—Ç 10.09.2023–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç 8 –¥–æ 17          1. –ñ–∏–º –≥–∏—Ä–∏:–ú: –≠—Ä–∫–µ–µ–≤ –≠—Ä–ª–∞–Ω - 57–ñ: –û–≤–æ–¥–æ–≤–∞ –ì–ª–∞—Ñ–∏—Ä–∞ - 47   2. –ú–∞—Ö–∏ –≥–∏—Ä–∏:          –ú: –≠—Å–ø–∞–Ω–¥–µ—Ä–æ–≤ –ê–∑–∏–∑ - 48–ñ: –ö–∞–∑–∞–Ω—Ü–µ–≤–∞ –ï–≤–∞ - 43      3. –û—Ç–∂–∏–º–∞–Ω–∏—è:      –ú: –ê–ª–æ–∑–∞–π –ó–∞—Ö–∞—Ä - 43–ñ: –ß–µ–±–æ—Ç–∞—Ä—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ - 61 4. –ü—Ä–µ—Å—Å :           –ú: –ú–∞–º–≤—Ä–∏–π—Å–∫–∏–π –ì–µ–æ—Ä–≥–∏–π - 42–ñ: –ú–æ–∑–≥–æ–≤–∞ –ê—Ä–∏–Ω–∞ - 57   5. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è:   –ú: –ú–∞–≥–æ–º–µ–¥–æ–≤ –ò–±–∞–¥—É–ª–ª–∞ - 65–ñ: –û—Å–∞–¥—ã—á–∞ –Ø–Ω–∞ - 53        6. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∏—Ä–µ–π:       –ú: –•—É–º–µ–Ω–∫–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä - 45–ñ: –í–µ–ª–∏—á –¢–∞–∏—Å–∏—è - 46          7. –ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É:–ú: –°–∏–¥–æ—Ä–æ—á–µ–≤ –¢–∏–º–æ—Ñ–µ–π - 1,92–ñ: –ß–∞—Ä—ã–∫–æ–≤–∞ –ê—Ä–∏–Ω–∞ - 1,90 8. –†—ã–≤–æ–∫ –ì–∏—Ä–∏: –ú: –ö–∞–Ω–∞—Ç–±–µ–∫–æ–≤ –ù—É—Ä–µ–ª - 28–ñ: –ï–ª–∏—Å–µ–µ–≤–∞ –ù–∞–¥–µ–∂–¥–∞ - 259. –°–∫–∞–∫–∞–ª–∫–∞:–ú: –ê–∫—Ä–∞–º –ê–±–¥—É–∫–∞–¥–∏—Ä–æ–≤ - 154–ñ: –õ—é–±–∞–∫–æ–≤–∞ –°–æ—Ñ—å—è - 193–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç 18 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ1. –ñ–∏–º –≥–∏—Ä–∏:–ú: –ï–≤–≥–ª–µ–≤—Å–∫–∏–π –§–µ–¥–æ—Ä - 66–ñ: –°–∏–≤–∞—á–µ–Ω–∫–æ –ú–∞—Ä–∏—è - 25   2. –ú–∞—Ö–∏ –≥–∏—Ä–∏:          –ú: –õ—É–Ω—ë–≤ –°–µ—Ä–≥–µ–π - 42–ñ: –ñ–µ–ª–æ–±–∞–Ω–æ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞ - 47      3. –û—Ç–∂–∏–º–∞–Ω–∏—è:      –ú: –ù–∞—É–º–æ–≤ –ê–Ω–¥—Ä–µ–π - 47–ñ: –ù–µ—Å–º–∞—à–Ω–∞—è –ê–ª—å–±–∏–Ω–∞ - 25 4. –ü—Ä–µ—Å—Å :           –ú: –ú–∞–ª–∞—Ö–∞–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π - 50–ñ: –•—É–±–µ–∂–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è - 42   5. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è:   –ú: –û–≤–æ–¥–æ–≤ –í–∞—Å–∏–ª–∏–π - 51–ñ: –ß–∏—Ä–∏–ø–æ–≤—Å–∫–∞—è –ï–ª–µ–Ω–∞ - 48        6. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∏—Ä–µ–π:       –ú: –Ø–±–ª–æ–∫–æ–≤ –ê—Ä—Ç–µ–º - 55–ñ: –ß–µ–±–æ—Ç–∞—Ä—å –í–∞–ª–µ—Ä–∏—è - 40          7. –ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É:–ú: –õ—é–±–∞–∫–æ–≤ –°–µ–º–µ–Ω - 2,15–ñ: –®–µ–º—á—É–∫ –õ—é–±–æ–≤—å - 1,84 8. –†—ã–≤–æ–∫ –ì–∏—Ä–∏: –ú: –ö–∞—Ä–Ω–∞—É–∫–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω - 30–ñ: –û–≤–æ–¥–æ–≤–∞ –ò—Ä–∏–Ω–∞ - 319. –°–∫–∞–∫–∞–ª–∫–∞:–ú: –ë—É—Ä–ª–∞–∫ –ï–≤–≥–µ–Ω–∏–π - 201–ñ: –õ–∏–ø–∞—Ç–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ - 153', parse_mode="MarkdownV2")
                logger.info(f" {message.from_user.username} do_things - –û—Ç–ø—Ä–∞–≤–∏–ª —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!! id = {message.chat.id}")

                ##############################
                #–ü–æ–∫—Ä–∞—Å–∫–∞ —á–µ—Ä–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
                ##############################
                logger.info(f" {message.from_user.username} do_things - –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ list_row_fixed = {list_row_fixed}")
                range_row_fixed = []
                l = 1
                while l <= 3:
                    if l == 2:
                        range_row_fixed.append("A" + str(list_row_fixed[l]) + ":C" + str(list_row_fixed[l]))
                    else:
                        range_row_fixed.append("B"+str(list_row_fixed[l])+":C"+str(list_row_fixed[l]))
                    l += 1

                worksheet.format(range_row_fixed, {
                    "backgroundColor": {
                        #0.2627451, 0.2627451, 0.2627451
                        "red": 0.2627451,
                        "green": 0.2627451,
                        "blue": 0.2627451

                    },
                    "horizontalAlignment": "CENTER",
                    "textFormat": {
                        "foregroundColor": {
                        #0.2627451, 0.2627451, 0.2627451
                        "red": 0.2627451,
                        "green": 0.2627451,
                        "blue": 0.2627451
                        },
                        "fontSize": 10,
                        "bold": False
                    }
                })


                ##############################
                #–ü–û–ö–†–ê–°–ö–ê –¢–ê–ë–õ–ò–¶–´ –í –ó–ï–õ–ï–ù–´–ô
                ##############################

                logger.info(f" {message.from_user.username} do_things - –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ - {ranges_to_color}")
                #RGB: 0.8509804, 0.91764706, 0.827451
                worksheet.format(ranges_to_color, {
                    "backgroundColor": {
                        "red": 0.8509804,
                        "green": 0.91764706,
                        "blue": 0.827451

                    },
                    "horizontalAlignment": "CENTER",
                    "textFormat": {
                        "foregroundColor": {
                            "red": 0.0,
                            "green": 0.0,
                            "blue": 0.0
                        },
                        "fontSize": 12,
                        "bold": False
                    }
                })
                range_row_fixed.clear()
                list_row_fixed.clear()
                ranges_to_color.clear()
                table_row.clear()

                logger.info(f" {message.from_user.username} do_things - –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—Ä–∞—Å–∫–∏ - {ranges_to_color}")
                logger.info(f" {message.from_user.username} do_things - –ü–æ–∫—Ä–∞—Å–∏–ª —Ç–∞–±–ª–∏—Ü—É - ")






                # whil??print?ie i < len(mas_name):
                # print(mas_name[19])
                # i = 1
                #     if len(mas_name[i-1]) > 1:
                #         if i <=8 or i > 27:
                #             print("–ú: "+mas_name[i-1])
                #         else:
                #             print("–ñ: " + mas_name[i - 1])
                #     i += 1
                logger.info(f" {message.from_user.username} do_things - mas_name - {mas_name}")
                if not range_error_colum:
                    logger.info(f" {message.from_user.username} do_things - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã range_error - {range_error_colum}")
                    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤ –≥–æ—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ.")
                else:
                    bot.send_message(message.chat.id, f"–ó–∞–º–µ—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–æ—á–Ω—ã–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —è—á–µ–π–∫–∏ - {range_error_colum}")
                bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ - <b>{record_part}</b>, —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤ - <b>{record_number}</b>", parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ 2 —Å—Ç–æ–ª–±–µ—Ü (–º—É–∂ - –∂–µ–Ω). –®–∞–±–ª–æ–Ω:")
                #bot.send_photo(message.chat.id, img = open('/template.png','rb'))
                bot.send_photo(photo = InputFile(f'/template.png'), chat_id=message.chat.id)
        except Exception as e:
            bot.send_message(message.chat.id, f"–ù—É –ø–∏–∑–¥–µ—Ü —Å–ª–æ–º–∞–ª–∏...(–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ): {str(e)}")
            err = str(e)
            logger.error(f"do_things - –û—à–∏–±–∫–∞ —É {message.chat.id} –æ—à–∏–±–∫–∞ - {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–°–¥–µ–ª–∞—Ç—å –≤–µ—â–∏')
    return markup











# –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@app.route('/', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_HOST)

if __name__ == '__main__':
    set_webhook()
    app.run(host=WEBHOOK_LISTEN,
            port=WEBHOOK_PORT,
            ssl_context=('/etc/letsencrypt/live/etedsfeqa.ru/fullchain.pem', '/etc/letsencrypt/live/etedsfeqa.ru/privkey.pem'))
